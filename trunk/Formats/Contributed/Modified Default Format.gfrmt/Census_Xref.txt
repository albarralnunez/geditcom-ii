(*Census cross reference script for GEDitCOM II
	01 SEP 2010, by Simon Robbins
	Lastest Revisions: 20 Feb 2010
	
This script displays a table of individuals in a single census event. The user should select any field within a census event and run the script.

There are a number of caveats to using this script. It looks for other individuals who have a census event linked to the same source with the same page reference as the selected census event.

If the selected field is in the source citation window, the script will use that source. If the selected field is in the event detail window the script will look for an appropriate source. It will consider any sources attached to the event and pick the first one it finds with the word "census" in the title.

Details - The details table is completed from the selected event.

Name - This will be the name in the GEDCOM file not necessarily the name recorded in the census. GEDCOM/GEDitCOM can cope with multiple names for individuals which could be linked to specific census sources but as most of these are just abbreviations or mistakes I do not add them and have not written the script to deal with them. The most noticable effect of this is that married women will be listed by their maiden name not their married name as in the census.

Age - This comes from the age field in the event details

State - ie. Married, widowed etc. There is no obvious place in a GEDCOM file to record this. There are several options
			a. Don't record it.
			b. Put it in the text field in the source citation
			c. Try and work out what it should have been by getting the script to search for marriages and then see if the spouse was dead or there were any divorce or anullment events prior to the census.
			
			Obviously if you use method a. nothing will appear in the report.
			
			I use method b. and the script will look for key words in the text field and if it finds them put them in the report
			
			Method c. would be fairly complex, slow down the script and probably produce unreliable results.
			
Relationship - This comes from the "Role in event" field in the source details.

Occupation - When an individual is found with the same census details, the script will look for any occupation attributes linked to the same source and page. It will only be the same as the actual census if the user adds multiple occupation attributes for all possible combinations. If for example there are three censuses for an individual with occupations of Shoe maker, Boot maker and cobbler the script will only pick the right one if all three are added with links to the correct source. If the user adds one generic occupation of say "Boot/Shoe maker" this is what will be reported. Unless you have added them as occupations it won't list all the children described as scholars or people described as "Living on own means" etc.

Birth place - As with name, GEDCOM/GEDitCOM can cope with multiple birth events. However these are usually just variations of the same thing and as I don't record them all the script doesn't look for them and will use the first one it finds and may be different to the wording in the census.

Obviously the script can only include individuals in the database so non-related visitors, lodgers, servants etc will not be listed unless, of course, they have been added to the database.

The names may not be in the same order as in the census. The script will list the "Head" first followed by "Wife", the sons/daughters in descending age order, then everyone else in descending age order.


Despite the above this script is still useful to check that data has been entered correctly, but is only a guide. Don't expect it to match the census entry exactly. It is also useful to see who was living together at the time of the census which is near impossible from just the GEDCOM file alone.

*)global keytypeglobal keyrefglobal spageglobal CenTitleproperty htmlstring : {}property headertable : {}property sortedlist : {}property scriptName : "Census Cross Reference"if CheckAvailable(scriptName, 1.6) is false then returntell application "GEDitCOM II"	set message visible to false	tell front document				set sourstruc to ""		set eventstruc to ""				set props to properties		set keytype to (class of key record) as string						try			set keyref to item 3 of (editing details of props)		on error			--display dialog "You need to select a non blank field" buttons {"OK"} default button 1			user option title "Error" message "You need to select a non blank field" buttons {"OK"}
			return		end try				set keylevel to level of keyref		if keylevel is 1 then					end if		if keylevel is 2 then			set eventtype to name of parent structure of keyref			set eventstruc to parent structure of keyref		end if		if keylevel is 3 then			set eventtype to name of parent structure of parent structure of keyref			set eventstruc to parent structure of parent structure of keyref		end if		if keylevel is 4 then			set eventtype to name of parent structure of parent structure of parent structure of keyref			set eventstruc to parent structure of parent structure of parent structure of keyref		end if		if keylevel is 5 then			set eventtype to name of parent structure of parent structure of parent structure of parent structure of keyref			set eventstruc to parent structure of parent structure of parent structure of keyref		end if					end tell			if eventstruc is not "" then		if name of eventstruc is not "CENS" then			--display dialog "You need to select a census event" buttons {"OK"} default button 1			user option title "Error" message "You need to select a census event" buttons {"OK"}
			return		end if		if sourstruc is "" then			set sourstruc to my getsource(eventstruc)		end if		if sourstruc is "" then			--display dialog "There is no census source to cross reference" buttons {"OK"} default button 1			user option title "Error" message "There is no census source to cross reference" buttons {"OK"}
			return		end if		set repData to my crossreference(eventstruc, sourstruc)	end if	end tellon getsource(eventstruc)	tell application "GEDitCOM II"		set message visible to false		tell eventstruc			set sours to find structures tag "SOUR" output "references"			set numsours to number of items in sours			repeat with s from 1 to numsours				set cursourtitle to evaluate expression "SOUR.i." & s & ".TITL"				if "Census" is in cursourtitle then					return item s of sours				end if			end repeat			return ""		end tell	end tellend getsourceon crossreference(exref, sxref)		tell application "GEDitCOM II"		set message visible to false		set tablerow to {}		set htmlstring to {}		set headertable to {}		tell exref			set etag to name of exref			set edate to evaluate expression "DATE"			set eplace to evaluate expression "PLAC"			set eaddr to evaluate expression "ADDR"		end tell		tell sxref			try				set spage to evaluate expression "PAGE"				set keysourref to contents of sxref				tell application "GEDitCOM II"					set CenTitle to source title of source id (contents of sxref) of front document				end tell			end try			set end of headertable to "<tr><td>Date</td><td>" & edate & "</td></tr>" & return			set end of headertable to "<tr><td>Reference</td><td>" & spage & "</td></tr>" & return			set end of headertable to "<tr><td>Place</td><td>" & eplace & "</td></tr>" & return			set end of headertable to "<tr><td>Address</td><td>" & eaddr & "</td></tr>" & return		end tell		if keytype is "individual" or keytype is "«class gcIn»" then			tell front document				set recs to (every individual whose gedcom contains spage)			end tell		end if		if keytype is "family" or keytype is "«class gcFa»" then			tell front document				set recs to (every family whose gedcom contains spage)			end tell		end if						set numrec to number of items in recs		repeat with r from 1 to numrec			set rec to item r of recs			tell rec				set cens to find structures tag "CENS" output "references"				--set indiname to alternate name				set indiname to "<a href='" & (id of rec) & "'>" & (name of rec) & "</a>"				set bdate to birth date user				set bplac to evaluate expression "BIRT.PLAC"				set numcens to number of items in cens				repeat with c from 1 to numcens					set cen to item c of cens					tell cen						set cendate to evaluate expression "DATE"						set cenplace to evaluate expression "PLAC"						set cenage to evaluate expression "AGE"						set cenaddr to evaluate expression "ADDR"						set censours to find structures tag "SOUR" output "references"						set numcensour to number of items in censours						repeat with s from 1 to numcensour							set censour to item s of censours							tell censour								set censourref to contents of censour																set censourpageref to evaluate expression "PAGE"								set censourrole to evaluate expression "EVEN.ROLE"								set cenrel to "?"								set censourtext to ""								set censourtext to evaluate expression "DATA.TEXT"								if "Married" is in censourtext then									set cenrel to "Married"								end if								if "Unmar'd" is in censourtext then									set cenrel to "Unmar'd"								end if								if "Unmarried" is in censourtext then									set cenrel to "Unmarried"								end if								if "Widow" is in censourtext then									set cenrel to "Widow"								end if								if "Widower" is in censourtext then									set cenrel to "Widower"								end if								if "Single" is in censourtext then									set cenrel to "Single"								end if								if censourref is keysourref then									if censourpageref is spage then										set tablerow to {}										set occup to my findoccupation(rec)										if censourrole is "Head" then											set sortnum to 1										else if censourrole is in {"Husband", "Wife"} then											set sortnum to 2										else if censourrole is in {"Daughter", "Son"} then											try												set sortnum to (1 / cenage) + 3											on error												if cenage is 0 then													set sortnum to 6												else													set sortnum to 5												end if											end try										else											try												set sortnum to (1 / cenage) + 5											on error												if cenage is 0 then													set sortnum to 8												else													set sortnum to 7												end if											end try										end if																				set end of tablerow to sortnum										set end of tablerow to "<tr><td>" & indiname & "</td><td align='center'>" & cenage & "</td><td align='center'>" & cenrel & "</td><td align='center'>" & censourrole & "</td><td>" & occup & "</td><td>" & bplac & "</td></tr>" & return																				set end of htmlstring to tablerow									end if								end if							end tell						end repeat					end tell				end repeat			end tell		end repeat		set sortedlist to my bubblesort(htmlstring)	end tellend crossreferenceon findoccupation(rec)	tell application "GEDitCOM II"		set message visible to false		tell rec			set occs to find structures tag "OCCU" output "references"			set numoccs to number of items in occs			if numoccs is 0 then				return ""			end if			repeat with o from 1 to numoccs				set occ to item o of occs				tell occ					set occup to contents					set occsours to find structures tag "SOUR" output "references"					set numoccsour to number of items in occsours					repeat with s from 1 to numoccsour						set occsour to item s of occsours						tell occsour							set occsourpageref to evaluate expression "PAGE"							if occsourpageref is spage then								return occup							else								if s = numoccsour then									set occup to ""								end if							end if						end tell					end repeat					if o = numoccs then						set occup to ""					end if				end tell			end repeat			return occup		end tell	end tellend findoccupationon bubblesort(the_list)	tell application "GEDitCOM II"		set message visible to false		set numtosort to number of items in the_list		set is_sorted to false		repeat until is_sorted			set is_sorted to true			repeat with i from 1 to numtosort - 1				if item 1 of (item i of the_list) > item 1 of (item (i + 1) of the_list) then					set {item i of the_list, item (i + 1) of the_list} to {item (i + 1) of the_list, item i of the_list}					set is_sorted to false				end if			end repeat		end repeat		set sortedlist to {}		repeat with i from 1 to numtosort						set end of sortedlist to item 2 of (item i of the_list)		end repeat		return sortedlist	end tellend bubblesorttell application "GEDitCOM II"	set message visible to false	-- prepare report	set rpt to "<div>" & return		set rpt to rpt & "<h1>Entry from " & CenTitle & "</h1>" & return		set rpt to rpt & "<br>" & return		set rpt to rpt & "<table border=1 cellspacing=0 cellpadding=0>" & return	set rpt to rpt & "<thead><tr><th colspan=2>Details</th></tr></thead>"	set rpt to rpt & (headertable as string) & return & "</table>" & return		set rpt to rpt & "<br><br>" & return		set rpt to rpt & "<table border=1 cellspacing=0 cellpadding=0 width='95%'>" & return	set rpt to rpt & "<thead><tr><th width= 200>Name</th><th width=50>Age</th><th width= 55>State</th><th width= 60>Relationship</th><th width= 225>Occupation</th><th>Birth Place</th></tr></thead>"		set rpt to rpt & (sortedlist as string) & return & "</table>" & return		-- end the report	set rpt to rpt & "</div>"end telltell application "GEDitCOM II"	set message visible to false	tell front document		set newreport to make new report with properties {name:"Census Report", body:rpt}		show browser of newreport				tell application "Finder"			set screen_size to bounds of window of desktop			set screen_width to item 3 of screen_size			set screen_height to item 4 of screen_size		end tell		tell application "GEDitCOM II"			set br to bounds of front window			if screen_width > 1024 then				set item 1 of br to (screen_width - 1024) / 2				set item 3 of br to screen_width - ((screen_width - 1024) / 2)			else				set item 1 of br to 22				set item 3 of br to screen_width - 22			end if			set item 2 of br to 50			set item 4 of br to screen_height - 50			set bounds of front window to br		end tell	end tellend tell(* Activate GEDitCOM II (if needed) and verify acceptable
     version is running and a document is open. Return true
     or false if script can run.
*)on CheckAvailable(sName, vNeed)	tell application "GEDitCOM II"		set message visible to false		activate		if versionNumber < vNeed then			user option title "The script '" & sName & ¬				"' requires GEDitCOM II, Version " & vNeed & ¬				" or newer" message "Please upgrade and try again." buttons {"OK"}			return false		end if		if number of documents is 0 then			user option title "The script '" & sName & ¬				¬					"' requires a document to be open" message ¬				"Please open a document and try again." buttons {"OK"}			return false		end if	end tell	return trueend CheckAvailable