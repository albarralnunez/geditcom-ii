global keytypeglobal keyrefglobal spageglobal CenTitleproperty sortedlist : {}property scriptName : "Sort Sources"if CheckAvailable(scriptName, 1.6) is false then returntell application "GEDitCOM II"	set message visible to false
	begin undo	tell front document				set sourstruc to ""		set eventstruc to ""				set props to properties		set keytype to (class of key record) as string						try			set keyref to item 3 of (editing details of props)		on error			--display dialog "You need to select a non blank field" buttons {"OK"} default button 1			user option title "Error" message "You need to select a non blank field" buttons {"OK"}
			return		end try								set keylevel to level of keyref		tell parent structure of keyref			try				set parentstruc to parent structure of keyref				set sours to every structure whose name is "SOUR"			end try			if number of items in sours is 0 then				tell parent structure of parent structure of keyref					try						set parentstruc to parent structure of parent structure of keyref						set sours to every structure whose name is "SOUR"					end try					if number of items in sours is 0 then						tell parent structure of parent structure of parent structure of keyref							try								set parentstruc to parent structure of parent structure of parent structure of keyref								set sours to every structure whose name is "SOUR"							end try							if number of items in sours is 0 then								tell parent structure of parent structure of parent structure of parent structure of keyref									try										set parentstruc to parent structure of parent structure of parent structure of parent structure of keyref										set sours to every structure whose name is "SOUR"									end try								end tell							end if						end tell					end if				end tell			end if		end tell	end tell	if number of items in sours is 0 then		user option title "There don't appear to be any sources here" message ¬			"Please try again." buttons {"OK"}	end if			--First Sort by Date	set numsours to number of items in sours	set is_sorted to false	repeat until is_sorted		set is_sorted to true		tell parentstruc			set sours to every structure whose name is "SOUR"		end tell		repeat with s from 1 to numsours - 1			try				set val1 to (event SDN of structure named "DATA") of item s of sours			on error				set val1 to 99999999			end try			try				set val2 to (event SDN of structure named "DATA") of item (s + 1) of sours			on error				set val2 to 99999999			end try			if val1 > val2 then				move item s of sours to after item (s + 1) of sours				set is_sorted to false			end if		end repeat	end repeat		-- now sort by Title where dates are the same	set is_sorted to false	repeat until is_sorted		set is_sorted to true		tell parentstruc			set sours to every structure whose name is "SOUR"		end tell		repeat with s from 1 to numsours - 1			try				set val1 to (event SDN of structure named "DATA") of item s of sours			on error				set val1 to 99999999			end try			try				set val2 to (event SDN of structure named "DATA") of item (s + 1) of sours			on error				set val2 to 99999999			end try						if val1 = val2 then				tell parentstruc										set val1 to (evaluate expression "SOUR.i." & s & ".ABBR")					if val1 is "" then						set val1 to (evaluate expression "SOUR.i." & s & ".TITL")					end if					if val1 is "" then						set val1 to "Source ID " & (contents of item s of sours)					end if										set val2 to (evaluate expression "SOUR.i." & (s + 1) & ".ABBR")					if val2 is "" then						set val2 to (evaluate expression "SOUR.i." & (s + 1) & ".TITL")					end if					if val2 is "" then						set val2 to "Source ID " & (contents of item s of sours)					end if					if val1 > val2 then						move item s of sours to after item (s + 1) of sours						set is_sorted to false					end if				end tell			end if		end repeat	end repeat		-- now sort by Page where dates and Title are the same	set is_sorted to false	repeat until is_sorted		set is_sorted to true		tell parentstruc			set sours to every structure whose name is "SOUR"						repeat with s from 1 to numsours - 1				try					set val1 to (event SDN of structure named "DATA") of item s of sours				on error					set val1 to 99999999				end try				try					set val2 to (event SDN of structure named "DATA") of item (s + 1) of sours				on error					set val2 to 99999999				end try				set val3 to (evaluate expression "SOUR.i." & s & ".ABBR")				if val3 is "" then					set val3 to (evaluate expression "SOUR.i." & s & ".TITL")				end if				if val3 is "" then					set val3 to "Source ID " & (contents of item s of sours)				end if								set val4 to (evaluate expression "SOUR.i." & (s + 1) & ".ABBR")				if val4 is "" then					set val4 to (evaluate expression "SOUR.i." & (s + 1) & ".TITL")				end if				if val4 is "" then					set val4 to "Source ID " & (contents of item s of sours)				end if				if val1 = val2 and val3 = val4 then					--if (event SDN of structure named "DATA") of item s of sours = (event SDN of structure named "DATA") of item (s + 1) of sours then					--tell parentstruc					try						set val1 to contents of structure named "PAGE" of item s of sours					on error						set val1 to "zzzzzzzzz"					end try					try						set val2 to contents of structure named "PAGE" of item (s + 1) of sours					on error						set val2 to "zzzzzzzzz"					end try					if val1 > val2 then						move item s of sours to after item (s + 1) of sours						set is_sorted to false					end if				end if			end repeat		end tell	end repeat
 end undo action "Sort Sources"end tell(* Activate GEDitCOM II (if needed) and verify acceptable
     version is running and a document is open. Return true
     or false if script can run.
*)on CheckAvailable(sName, vNeed)	tell application "GEDitCOM II"		set message visible to false		activate		if versionNumber < vNeed then			user option title "The script '" & sName & ¬				"' requires GEDitCOM II, Version " & vNeed & ¬				" or newer" message "Please upgrade and try again." buttons {"OK"}			return false		end if		if number of documents is 0 then			user option title "The script '" & sName & ¬				¬					"' requires a document to be open" message ¬				"Please open a document and try again." buttons {"OK"}			return false		end if	end tell	return trueend CheckAvailable